{"ast":null,"code":"import SvgIcon from '@jamescoyle/vue-icon';\nimport { mdiCheckboxMarked, mdiCropSquare } from '@mdi/js';\nexport default {\n  components: {\n    SvgIcon\n  },\n  data() {\n    return {\n      workerData: [{\n        title: 'Дата рождения',\n        data: ''\n      }, {\n        title: 'Серия паспорта',\n        data: ''\n      }, {\n        title: 'Пол',\n        data: ''\n      }]\n    };\n  },\n  computed: {\n    worker() {\n      const workerId = parseInt(this.$route.params.id);\n      return this.$store.getters.getWorkerById(workerId);\n    },\n    workerDocuments() {\n      if (!this.worker) return null;\n      const workerId = parseInt(this.$route.params.id);\n      return this.$store.getters.getDocuments.filter(document => document.belongTo === `${this.worker.firstName} ${this.worker.lastName}`);\n    },\n    isActive() {\n      return this.worker ? this.worker.isActive : false;\n    }\n  },\n  methods: {\n    // Метод для получения документа по его id\n    getDocumentById(id) {\n      return this.$store.getters.getDocumentById(id);\n    }\n  },\n  async created() {\n    // Получаем документы и рабочих при загрузке страницы\n    await this.$store.dispatch('fetchDocuments');\n    await this.$store.dispatch('fetchWorkers');\n\n    // Обновляем данные рабочего при загрузке страницы\n    this.updateWorkerData();\n  },\n  watch: {\n    worker(newWorker) {\n      if (newWorker) {\n        // Обновляем данные рабочего при каждом изменении worker\n        this.updateWorkerData();\n      }\n    }\n  },\n  methods: {\n    updateWorkerData() {\n      if (this.worker) {\n        this.workerData = [{\n          title: 'Дата рождения',\n          data: this.worker.dateOfBirth\n        }, {\n          title: 'Серия паспорта',\n          data: this.worker.passportSeries\n        }, {\n          title: 'Пол',\n          data: this.worker.gender\n        }];\n      }\n    }\n  }\n};","map":{"version":3,"names":["SvgIcon","mdiCheckboxMarked","mdiCropSquare","components","data","workerData","title","computed","worker","workerId","parseInt","$route","params","id","$store","getters","getWorkerById","workerDocuments","getDocuments","filter","document","belongTo","firstName","lastName","isActive","methods","getDocumentById","created","dispatch","updateWorkerData","watch","newWorker","dateOfBirth","passportSeries","gender"],"sources":["/Users/ibratibragimov/D-disk/working/micros-test/src/views/Details/WorkerDetails.vue"],"sourcesContent":["<template>\n  <div v-if=\"worker\">\n    <v-card>\n      <v-card-title class=\"font-weight-bold\">\n        {{ worker.firstName }} {{ worker.lastName }}\n      </v-card-title>\n      <v-card-item>\n        <ul class=\"worker-lists\">\n          <li class=\"worker-list\" v-for=\"item in workerData\" :key=\"item.title\">\n            <span class=\"worker-info-title\"\n              >{{ item.title }}: <span>{{ item.data }}</span></span\n            >\n          </li>\n          <li class=\"worker-list\">\n            <span class=\"worker-info-title\">Активен:</span>\n            <svg-icon\n              :type=\"isActive ? 'mdi' : 'mdiCropSquare'\"\n              :path=\"isActive ? mdiCheckboxMarked : mdiCropSquare\"\n            ></svg-icon>\n          </li>\n        </ul>\n        <h3>Документы, принадлежащие рабочему:</h3>\n        <ul v-if=\"workerDocuments && workerDocuments.length > 0\">\n          <li v-for=\"document in workerDocuments\" :key=\"document.id\">\n            {{ document.typeOfDocument }} - {{ document.documentNumber }}\n          </li>\n        </ul>\n        <p v-else>Нет документов для этого рабочего.</p>\n      </v-card-item>\n    </v-card>\n  </div>\n  <div v-else>\n    <span>Вернитесь обратно чтобы загрузить данные</span>\n  </div>\n</template>\n\n<script>\nimport SvgIcon from '@jamescoyle/vue-icon'\nimport { mdiCheckboxMarked, mdiCropSquare } from '@mdi/js'\n\nexport default {\n  components: {\n    SvgIcon,\n  },\n  data() {\n    return {\n      workerData: [\n        {\n          title: 'Дата рождения',\n          data: '',\n        },\n        {\n          title: 'Серия паспорта',\n          data: '',\n        },\n        {\n          title: 'Пол',\n          data: '',\n        },\n      ],\n    }\n  },\n  computed: {\n    worker() {\n      const workerId = parseInt(this.$route.params.id)\n      return this.$store.getters.getWorkerById(workerId)\n    },\n    workerDocuments() {\n      if (!this.worker) return null\n      const workerId = parseInt(this.$route.params.id)\n      return this.$store.getters.getDocuments.filter(\n        (document) =>\n          document.belongTo ===\n          `${this.worker.firstName} ${this.worker.lastName}`\n      )\n    },\n    isActive() {\n      return this.worker ? this.worker.isActive : false\n    },\n  },\n  methods: {\n    // Метод для получения документа по его id\n    getDocumentById(id) {\n      return this.$store.getters.getDocumentById(id)\n    },\n  },\n  async created() {\n    // Получаем документы и рабочих при загрузке страницы\n    await this.$store.dispatch('fetchDocuments')\n    await this.$store.dispatch('fetchWorkers')\n\n    // Обновляем данные рабочего при загрузке страницы\n    this.updateWorkerData()\n  },\n  watch: {\n    worker(newWorker) {\n      if (newWorker) {\n        // Обновляем данные рабочего при каждом изменении worker\n        this.updateWorkerData()\n      }\n    },\n  },\n  methods: {\n    updateWorkerData() {\n      if (this.worker) {\n        this.workerData = [\n          {\n            title: 'Дата рождения',\n            data: this.worker.dateOfBirth,\n          },\n          {\n            title: 'Серия паспорта',\n            data: this.worker.passportSeries,\n          },\n          {\n            title: 'Пол',\n            data: this.worker.gender,\n          },\n        ]\n      }\n    },\n  },\n}\n</script>\n"],"mappings":"AAqCA,OAAOA,OAAM,MAAO,sBAAqB;AACzC,SAASC,iBAAiB,EAAEC,aAAY,QAAS,SAAQ;AAEzD,eAAe;EACbC,UAAU,EAAE;IACVH;EACF,CAAC;EACDI,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE,CACV;QACEC,KAAK,EAAE,eAAe;QACtBF,IAAI,EAAE;MACR,CAAC,EACD;QACEE,KAAK,EAAE,gBAAgB;QACvBF,IAAI,EAAE;MACR,CAAC,EACD;QACEE,KAAK,EAAE,KAAK;QACZF,IAAI,EAAE;MACR,CAAC;IAEL;EACF,CAAC;EACDG,QAAQ,EAAE;IACRC,MAAMA,CAAA,EAAG;MACP,MAAMC,QAAO,GAAIC,QAAQ,CAAC,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,EAAE;MAC/C,OAAO,IAAI,CAACC,MAAM,CAACC,OAAO,CAACC,aAAa,CAACP,QAAQ;IACnD,CAAC;IACDQ,eAAeA,CAAA,EAAG;MAChB,IAAI,CAAC,IAAI,CAACT,MAAM,EAAE,OAAO,IAAG;MAC5B,MAAMC,QAAO,GAAIC,QAAQ,CAAC,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,EAAE;MAC/C,OAAO,IAAI,CAACC,MAAM,CAACC,OAAO,CAACG,YAAY,CAACC,MAAM,CAC3CC,QAAQ,IACPA,QAAQ,CAACC,QAAO,KACf,GAAE,IAAI,CAACb,MAAM,CAACc,SAAS,IAAI,IAAI,CAACd,MAAM,CAACe,QAAS,EACrD;IACF,CAAC;IACDC,QAAQA,CAAA,EAAG;MACT,OAAO,IAAI,CAAChB,MAAK,GAAI,IAAI,CAACA,MAAM,CAACgB,QAAO,GAAI,KAAI;IAClD;EACF,CAAC;EACDC,OAAO,EAAE;IACP;IACAC,eAAeA,CAACb,EAAE,EAAE;MAClB,OAAO,IAAI,CAACC,MAAM,CAACC,OAAO,CAACW,eAAe,CAACb,EAAE;IAC/C;EACF,CAAC;EACD,MAAMc,OAAOA,CAAA,EAAG;IACd;IACA,MAAM,IAAI,CAACb,MAAM,CAACc,QAAQ,CAAC,gBAAgB;IAC3C,MAAM,IAAI,CAACd,MAAM,CAACc,QAAQ,CAAC,cAAc;;IAEzC;IACA,IAAI,CAACC,gBAAgB,CAAC;EACxB,CAAC;EACDC,KAAK,EAAE;IACLtB,MAAMA,CAACuB,SAAS,EAAE;MAChB,IAAIA,SAAS,EAAE;QACb;QACA,IAAI,CAACF,gBAAgB,CAAC;MACxB;IACF;EACF,CAAC;EACDJ,OAAO,EAAE;IACPI,gBAAgBA,CAAA,EAAG;MACjB,IAAI,IAAI,CAACrB,MAAM,EAAE;QACf,IAAI,CAACH,UAAS,GAAI,CAChB;UACEC,KAAK,EAAE,eAAe;UACtBF,IAAI,EAAE,IAAI,CAACI,MAAM,CAACwB;QACpB,CAAC,EACD;UACE1B,KAAK,EAAE,gBAAgB;UACvBF,IAAI,EAAE,IAAI,CAACI,MAAM,CAACyB;QACpB,CAAC,EACD;UACE3B,KAAK,EAAE,KAAK;UACZF,IAAI,EAAE,IAAI,CAACI,MAAM,CAAC0B;QACpB,CAAC,CACH;MACF;IACF;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}