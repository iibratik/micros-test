{"ast":null,"code":"import DataTable from '@/components/DataTable.vue';\nexport default {\n  components: {\n    DataTable\n  },\n  data() {\n    return {\n      workerData: [{\n        title: 'Дата рождения',\n        data: ''\n      }, {\n        title: 'Серия паспорта',\n        data: ''\n      }, {\n        title: 'Пол',\n        data: ''\n      }],\n      documentHeader: [{\n        align: 'start',\n        sortable: true,\n        key: 'typeOfDocument',\n        title: 'Тип документа'\n      }, {\n        key: 'documentNumber',\n        title: 'Номер документа'\n      }, {\n        key: 'dateDocument',\n        title: 'Дата создания'\n      }, {\n        key: 'belongTo',\n        title: 'Владелец',\n        sortable: false\n      }, {\n        key: 'typeDocument',\n        title: 'Тип документа'\n      }]\n    };\n  },\n  computed: {\n    worker() {\n      const workerId = parseInt(this.$route.params.id);\n      return this.$store.getters.getWorkerById(workerId);\n    },\n    workerDocuments() {\n      if (!this.worker) return null;\n      const workerId = parseInt(this.$route.params.id);\n      return this.$store.getters.getDocuments.filter(document => document.belongTo === `${this.worker.firstName} ${this.worker.lastName}`);\n    }\n  },\n  methods: {\n    // Метод для получения документа по его id\n    getDocumentById(id) {\n      return this.$store.getters.getDocumentById(id);\n    }\n  },\n  async created() {\n    // Получаем документы и рабочих при загрузке страницы\n    await this.$store.dispatch('fetchDocuments');\n    await this.$store.dispatch('fetchWorkers');\n\n    // Обновляем данные рабочего при загрузке страницы\n    this.updateWorkerData();\n  },\n  watch: {\n    worker(newWorker) {\n      if (newWorker) {\n        // Обновляем данные рабочего при каждом изменении worker\n        this.updateWorkerData();\n      }\n    }\n  },\n  methods: {\n    updateWorkerData() {\n      if (this.worker) {\n        this.workerData = [{\n          title: 'Дата рождения',\n          data: this.worker.dateOfBirth\n        }, {\n          title: 'Серия паспорта',\n          data: this.worker.passportSeries\n        }, {\n          title: 'Пол',\n          data: this.worker.gender\n        }];\n      }\n    }\n  }\n};","map":{"version":3,"names":["DataTable","components","data","workerData","title","documentHeader","align","sortable","key","computed","worker","workerId","parseInt","$route","params","id","$store","getters","getWorkerById","workerDocuments","getDocuments","filter","document","belongTo","firstName","lastName","methods","getDocumentById","created","dispatch","updateWorkerData","watch","newWorker","dateOfBirth","passportSeries","gender"],"sources":["/Users/ibratibragimov/D-disk/working/micros-test/src/views/Details/WorkerDetails.vue"],"sourcesContent":["<template>\n  <v-col >\n    <v-card v-if=\"worker\">\n      <v-card-title class=\"font-weight-bold\">\n        {{ worker.firstName }} {{ worker.lastName }}\n      </v-card-title>\n      <v-card-text>\n        <ul class=\"worker-lists\">\n          <li class=\"worker-list\" v-for=\"item in workerData\" :key=\"item.title\">\n            <span class=\"worker-info-title\">\n              {{ item.title }}: <span>{{ item.data }}</span>\n            </span>\n          </li>\n          <li class=\"worker-list\">\n            <span class=\"worker-info-title\">Активность: </span>\n            <v-icon\n              v-if=\"worker.isActive\"\n              size=\"large\"\n              color=\"primary\"\n              icon=\"mdi-checkbox-marked\"\n            ></v-icon>\n            <v-icon\n              v-if=\"!worker.isActive\"\n              size=\"large\"\n              color=\"primary\"\n              icon=\"mdi-alpha-x-box\"\n            ></v-icon>\n          </li>\n        </ul>\n        <DataTable\n          :title=\"`Документы, принадлежащие рабочему:`\"\n          :items=\"workerDocuments\"\n          :headers=\"documentHeader\"\n          :link=\"`document`\"\n          v-if=\"workerDocuments && workerDocuments.length > 0\"\n        />\n        <p v-else>Нет документов для этого рабочего.</p>\n      </v-card-text>\n    </v-card>\n  <v-card v-else>\n    <!-- Если что-то не загрузится -->\n    Вернитесь в начало для повторной загрузки данных\n  </v-card>\n  </v-col>\n</template>\n\n<script>\nimport DataTable from '@/components/DataTable.vue'\n\nexport default {\n  components: {\n    DataTable,\n  },\n  data() {\n    return {\n      workerData: [\n        {\n          title: 'Дата рождения',\n          data: '',\n        },\n        {\n          title: 'Серия паспорта',\n          data: '',\n        },\n        {\n          title: 'Пол',\n          data: '',\n        },\n      ],\n      documentHeader: [\n        {\n          align: 'start',\n          sortable: true,\n          key: 'typeOfDocument',\n          title: 'Тип документа',\n        },\n        { key: 'documentNumber', title: 'Номер документа' },\n        { key: 'dateDocument', title: 'Дата создания' },\n        { key: 'belongTo', title: 'Владелец', sortable: false },\n        { key: 'typeDocument', title: 'Тип документа' },\n      ],\n    }\n  },\n  computed: {\n    worker() {\n      const workerId = parseInt(this.$route.params.id)\n      return this.$store.getters.getWorkerById(workerId)\n    },\n    workerDocuments() {\n      if (!this.worker) return null\n      const workerId = parseInt(this.$route.params.id)\n      return this.$store.getters.getDocuments.filter(\n        (document) =>\n          document.belongTo ===\n          `${this.worker.firstName} ${this.worker.lastName}`\n      )\n    },\n  },\n  methods: {\n    // Метод для получения документа по его id\n    getDocumentById(id) {\n      return this.$store.getters.getDocumentById(id)\n    },\n  },\n  async created() {\n    // Получаем документы и рабочих при загрузке страницы\n    await this.$store.dispatch('fetchDocuments')\n    await this.$store.dispatch('fetchWorkers')\n\n    // Обновляем данные рабочего при загрузке страницы\n    this.updateWorkerData()\n  },\n  watch: {\n    worker(newWorker) {\n      if (newWorker) {\n        // Обновляем данные рабочего при каждом изменении worker\n        this.updateWorkerData()\n      }\n    },\n  },\n  methods: {\n    updateWorkerData() {\n      if (this.worker) {\n        this.workerData = [\n          {\n            title: 'Дата рождения',\n            data: this.worker.dateOfBirth,\n          },\n          {\n            title: 'Серия паспорта',\n            data: this.worker.passportSeries,\n          },\n          {\n            title: 'Пол',\n            data: this.worker.gender,\n          },\n        ]\n      }\n    },\n  },\n}\n</script>\n"],"mappings":"AA+CA,OAAOA,SAAQ,MAAO,4BAA2B;AAEjD,eAAe;EACbC,UAAU,EAAE;IACVD;EACF,CAAC;EACDE,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE,CACV;QACEC,KAAK,EAAE,eAAe;QACtBF,IAAI,EAAE;MACR,CAAC,EACD;QACEE,KAAK,EAAE,gBAAgB;QACvBF,IAAI,EAAE;MACR,CAAC,EACD;QACEE,KAAK,EAAE,KAAK;QACZF,IAAI,EAAE;MACR,CAAC,CACF;MACDG,cAAc,EAAE,CACd;QACEC,KAAK,EAAE,OAAO;QACdC,QAAQ,EAAE,IAAI;QACdC,GAAG,EAAE,gBAAgB;QACrBJ,KAAK,EAAE;MACT,CAAC,EACD;QAAEI,GAAG,EAAE,gBAAgB;QAAEJ,KAAK,EAAE;MAAkB,CAAC,EACnD;QAAEI,GAAG,EAAE,cAAc;QAAEJ,KAAK,EAAE;MAAgB,CAAC,EAC/C;QAAEI,GAAG,EAAE,UAAU;QAAEJ,KAAK,EAAE,UAAU;QAAEG,QAAQ,EAAE;MAAM,CAAC,EACvD;QAAEC,GAAG,EAAE,cAAc;QAAEJ,KAAK,EAAE;MAAgB,CAAC;IAEnD;EACF,CAAC;EACDK,QAAQ,EAAE;IACRC,MAAMA,CAAA,EAAG;MACP,MAAMC,QAAO,GAAIC,QAAQ,CAAC,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,EAAE;MAC/C,OAAO,IAAI,CAACC,MAAM,CAACC,OAAO,CAACC,aAAa,CAACP,QAAQ;IACnD,CAAC;IACDQ,eAAeA,CAAA,EAAG;MAChB,IAAI,CAAC,IAAI,CAACT,MAAM,EAAE,OAAO,IAAG;MAC5B,MAAMC,QAAO,GAAIC,QAAQ,CAAC,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,EAAE;MAC/C,OAAO,IAAI,CAACC,MAAM,CAACC,OAAO,CAACG,YAAY,CAACC,MAAM,CAC3CC,QAAQ,IACPA,QAAQ,CAACC,QAAO,KACf,GAAE,IAAI,CAACb,MAAM,CAACc,SAAS,IAAI,IAAI,CAACd,MAAM,CAACe,QAAS,EACrD;IACF;EACF,CAAC;EACDC,OAAO,EAAE;IACP;IACAC,eAAeA,CAACZ,EAAE,EAAE;MAClB,OAAO,IAAI,CAACC,MAAM,CAACC,OAAO,CAACU,eAAe,CAACZ,EAAE;IAC/C;EACF,CAAC;EACD,MAAMa,OAAOA,CAAA,EAAG;IACd;IACA,MAAM,IAAI,CAACZ,MAAM,CAACa,QAAQ,CAAC,gBAAgB;IAC3C,MAAM,IAAI,CAACb,MAAM,CAACa,QAAQ,CAAC,cAAc;;IAEzC;IACA,IAAI,CAACC,gBAAgB,CAAC;EACxB,CAAC;EACDC,KAAK,EAAE;IACLrB,MAAMA,CAACsB,SAAS,EAAE;MAChB,IAAIA,SAAS,EAAE;QACb;QACA,IAAI,CAACF,gBAAgB,CAAC;MACxB;IACF;EACF,CAAC;EACDJ,OAAO,EAAE;IACPI,gBAAgBA,CAAA,EAAG;MACjB,IAAI,IAAI,CAACpB,MAAM,EAAE;QACf,IAAI,CAACP,UAAS,GAAI,CAChB;UACEC,KAAK,EAAE,eAAe;UACtBF,IAAI,EAAE,IAAI,CAACQ,MAAM,CAACuB;QACpB,CAAC,EACD;UACE7B,KAAK,EAAE,gBAAgB;UACvBF,IAAI,EAAE,IAAI,CAACQ,MAAM,CAACwB;QACpB,CAAC,EACD;UACE9B,KAAK,EAAE,KAAK;UACZF,IAAI,EAAE,IAAI,CAACQ,MAAM,CAACyB;QACpB,CAAC,CACH;MACF;IACF;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}