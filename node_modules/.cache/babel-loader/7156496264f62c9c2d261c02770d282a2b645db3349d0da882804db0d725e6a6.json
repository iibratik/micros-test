{"ast":null,"code":"import { createRouter, createWebHistory } from 'vue-router';\nimport WorkerDetails from '@/views/Details/WorkerDetails.vue';\nimport DocumentDetails from '@/views/Details/DocumentDetails.vue';\nimport WorkersList from '@/views/Lists/WorkersList';\nimport DocumentsList from '@/views/Lists/DocumentsList';\nconst routes = [{\n  path: '/',\n  redirect: '/workers',\n  meta: {\n    title: 'Список работников'\n  }\n  // Пустой список работников, здесь они будут загружаться из хранилища\n},\n// Маршрут для отображения списка работников\n{\n  path: '/workers',\n  component: WorkersList,\n  meta: {\n    title: 'Список работников'\n  },\n  props: {\n    workers: []\n  } // Пустой список работников, здесь они будут загружаться из хранилища\n},\n// Маршрут для отображения списка документов\n{\n  path: '/documents',\n  component: DocumentsList,\n  meta: {\n    title: 'Список документов'\n  },\n  props: {\n    documents: []\n  } // Пустой список документов, здесь они будут загружаться из хранилища\n},\n// Параметризированный маршрут для отображения данных о работнике\n{\n  path: '/worker/:id',\n  component: WorkerDetails,\n  meta: {\n    title: 'Рабочий'\n  },\n  props: true\n},\n// Параметризированный маршрут для отображения данных о документе\n{\n  path: '/document/:id',\n  component: DocumentDetails,\n  meta: {\n    title: 'Документ'\n  },\n  props: true\n}];\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n});\n\n// Глобальный навигационный хук `afterEach`\nrouter.afterEach(to => {\n  // Если у маршрута есть метаданные с заголовком, установим его в качестве title страницы\n  if (to.meta.title) {\n    document.title = to.meta.title;\n    localStorage.setItem('pageTitle', to.meta.title); // Сохраняем заголовок в localStorage\n  } else {\n    // Если метаданные не определены, установим заголовок по умолчанию\n    document.title = 'Мой сайт'; // Здесь можно задать любой заголовок по умолчанию\n    localStorage.removeItem('pageTitle'); // Удаляем сохраненный заголовок из localStorage\n  }\n});\n\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","WorkerDetails","DocumentDetails","WorkersList","DocumentsList","routes","path","redirect","meta","title","component","props","workers","documents","router","history","process","env","BASE_URL","afterEach","to","document","localStorage","setItem","removeItem"],"sources":["/Users/ibratibragimov/D-disk/working/micros-test/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHistory } from 'vue-router'\nimport WorkerDetails from '@/views/Details/WorkerDetails.vue'\nimport DocumentDetails from '@/views/Details/DocumentDetails.vue'\nimport WorkersList from '@/views/Lists/WorkersList'\nimport DocumentsList from '@/views/Lists/DocumentsList'\n\nconst routes = [\n  {\n    path: '/',\n    redirect: '/workers',\n    meta: { title: 'Список работников' },\n    // Пустой список работников, здесь они будут загружаться из хранилища\n  },\n  // Маршрут для отображения списка работников\n  {\n    path: '/workers',\n    component: WorkersList,\n    meta: { title: 'Список работников' },\n    props: { workers: [] }, // Пустой список работников, здесь они будут загружаться из хранилища\n  },\n  // Маршрут для отображения списка документов\n  {\n    path: '/documents',\n    component: DocumentsList,\n    meta: { title: 'Список документов' },\n    props: { documents: [] }, // Пустой список документов, здесь они будут загружаться из хранилища\n  },\n  // Параметризированный маршрут для отображения данных о работнике\n  {\n    path: '/worker/:id',\n    component: WorkerDetails,\n    meta: { title: 'Рабочий' },\n    props: true,\n  },\n  // Параметризированный маршрут для отображения данных о документе\n  {\n    path: '/document/:id',\n    component: DocumentDetails,\n    meta: { title: 'Документ' },\n    props: true,\n  },\n]\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes,\n});\n\n// Глобальный навигационный хук `afterEach`\nrouter.afterEach((to) => {\n  // Если у маршрута есть метаданные с заголовком, установим его в качестве title страницы\n  if (to.meta.title) {\n    document.title = to.meta.title;\n    localStorage.setItem('pageTitle', to.meta.title); // Сохраняем заголовок в localStorage\n  } else {\n    // Если метаданные не определены, установим заголовок по умолчанию\n    document.title = 'Мой сайт'; // Здесь можно задать любой заголовок по умолчанию\n    localStorage.removeItem('pageTitle'); // Удаляем сохраненный заголовок из localStorage\n  }\n});\n\n\nexport default router\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,gBAAgB,QAAQ,YAAY;AAC3D,OAAOC,aAAa,MAAM,mCAAmC;AAC7D,OAAOC,eAAe,MAAM,qCAAqC;AACjE,OAAOC,WAAW,MAAM,2BAA2B;AACnD,OAAOC,aAAa,MAAM,6BAA6B;AAEvD,MAAMC,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,GAAG;EACTC,QAAQ,EAAE,UAAU;EACpBC,IAAI,EAAE;IAAEC,KAAK,EAAE;EAAoB;EACnC;AACF,CAAC;AACD;AACA;EACEH,IAAI,EAAE,UAAU;EAChBI,SAAS,EAAEP,WAAW;EACtBK,IAAI,EAAE;IAAEC,KAAK,EAAE;EAAoB,CAAC;EACpCE,KAAK,EAAE;IAAEC,OAAO,EAAE;EAAG,CAAC,CAAE;AAC1B,CAAC;AACD;AACA;EACEN,IAAI,EAAE,YAAY;EAClBI,SAAS,EAAEN,aAAa;EACxBI,IAAI,EAAE;IAAEC,KAAK,EAAE;EAAoB,CAAC;EACpCE,KAAK,EAAE;IAAEE,SAAS,EAAE;EAAG,CAAC,CAAE;AAC5B,CAAC;AACD;AACA;EACEP,IAAI,EAAE,aAAa;EACnBI,SAAS,EAAET,aAAa;EACxBO,IAAI,EAAE;IAAEC,KAAK,EAAE;EAAU,CAAC;EAC1BE,KAAK,EAAE;AACT,CAAC;AACD;AACA;EACEL,IAAI,EAAE,eAAe;EACrBI,SAAS,EAAER,eAAe;EAC1BM,IAAI,EAAE;IAAEC,KAAK,EAAE;EAAW,CAAC;EAC3BE,KAAK,EAAE;AACT,CAAC,CACF;AAED,MAAMG,MAAM,GAAGf,YAAY,CAAC;EAC1BgB,OAAO,EAAEf,gBAAgB,CAACgB,OAAO,CAACC,GAAG,CAACC,QAAQ,CAAC;EAC/Cb;AACF,CAAC,CAAC;;AAEF;AACAS,MAAM,CAACK,SAAS,CAAEC,EAAE,IAAK;EACvB;EACA,IAAIA,EAAE,CAACZ,IAAI,CAACC,KAAK,EAAE;IACjBY,QAAQ,CAACZ,KAAK,GAAGW,EAAE,CAACZ,IAAI,CAACC,KAAK;IAC9Ba,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEH,EAAE,CAACZ,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC;EACpD,CAAC,MAAM;IACL;IACAY,QAAQ,CAACZ,KAAK,GAAG,UAAU,CAAC,CAAC;IAC7Ba,YAAY,CAACE,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;EACxC;AACF,CAAC,CAAC;;AAGF,eAAeV,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}